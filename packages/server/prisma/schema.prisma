// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DOT_DATABASE_URL")
}

enum RequestType {
  Vacation
  General
  Report
}

enum RequestStatusType {
  Resolved
  Rejected
  InProgress
}

enum InfoType {
  User
}

model Role {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @unique
  description String     @default("") @db.Text
  users       UserRole[]
}

model Info {
  id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type InfoType
  data Json     @db.Json
}

model Request {
  id      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type    RequestType
  message String?
  start   DateTime    @db.Date
  end     DateTime    @db.Date

  statuses        RequestStatus[]
  sender          User             @relation("sender", fields: [senderId], references: [id])
  senderId        String           @db.Uuid
  projectRequests ProjectRequest[]
  receiver        User?            @relation("receiver", fields: [receiverId], references: [id])
  receiverId      String?          @db.Uuid

  eventId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequestStatus {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  request    Request           @relation(fields: [requestId], references: [id])
  requestId  String            @db.Uuid
  status     RequestStatusType
  resolver   User              @relation("resolver", fields: [resolverId], references: [id])
  resolverId String            @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectRequest {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.Uuid
  request   Request @relation(fields: [requestId], references: [id])
  requestId String  @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  refresh   String?  @unique
  email     String   @unique
  name      String
  picture   String?
  startFrom DateTime @db.Date

  requests         Request[]       @relation("sender")
  responses        Request[]       @relation("receiver")
  owned            Project[]       @relation("owner")
  projects         ProjectUser[]
  managering       Project[]       @relation("manager")
  roles            UserRole[]
  resolvedRequests RequestStatus[] @relation("resolver")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectUser {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.Uuid
  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String @unique
  description String @db.Text

  owner     User             @relation(name: "owner", fields: [ownerId], references: [id])
  ownerId   String           @db.Uuid
  manager   User             @relation(name: "manager", fields: [managerId], references: [id])
  managerId String           @db.Uuid
  requests  ProjectRequest[]
  members   ProjectUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
